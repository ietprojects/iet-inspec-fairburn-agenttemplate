//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.34209
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace IET.Inspec.Fairburn.AgentTemplate.Proxy {
    using System.Runtime.Serialization;
    using System;
    
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="GetTaskRequest", Namespace="http://schemas.datacontract.org/2004/07/IET.Inspec.Fairburn.AgentTemplate.Contrac" +
        "t")]
    [System.SerializableAttribute()]
    public partial class GetTaskRequest : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int TestModeField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int TestMode {
            get {
                return this.TestModeField;
            }
            set {
                if ((this.TestModeField.Equals(value) != true)) {
                    this.TestModeField = value;
                    this.RaisePropertyChanged("TestMode");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="TaskResponse", Namespace="http://schemas.datacontract.org/2004/07/IET.Inspec.Fairburn.AgentTemplate.Contrac" +
        "t")]
    [System.SerializableAttribute()]
    public partial class TaskResponse : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Guid LockField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Guid Lock {
            get {
                return this.LockField;
            }
            set {
                if ((this.LockField.Equals(value) != true)) {
                    this.LockField = value;
                    this.RaisePropertyChanged("Lock");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="PostResultsRequest", Namespace="http://schemas.datacontract.org/2004/07/IET.Inspec.Fairburn.AgentTemplate.Contrac" +
        "t")]
    [System.SerializableAttribute()]
    public partial class PostResultsRequest : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Guid LockField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int TestModeField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Guid Lock {
            get {
                return this.LockField;
            }
            set {
                if ((this.LockField.Equals(value) != true)) {
                    this.LockField = value;
                    this.RaisePropertyChanged("Lock");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int TestMode {
            get {
                return this.TestModeField;
            }
            set {
                if ((this.TestModeField.Equals(value) != true)) {
                    this.TestModeField = value;
                    this.RaisePropertyChanged("TestMode");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="Proxy.IService")]
    public interface IService {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/Ping", ReplyAction="http://tempuri.org/IService/PingResponse")]
        IET.Inspec.Fairburn.Framework.AgentPingResponse Ping();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/Ping", ReplyAction="http://tempuri.org/IService/PingResponse")]
        System.Threading.Tasks.Task<IET.Inspec.Fairburn.Framework.AgentPingResponse> PingAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/GetTask", ReplyAction="http://tempuri.org/IService/GetTaskResponse")]
        IET.Inspec.Fairburn.AgentTemplate.Proxy.TaskResponse GetTask(IET.Inspec.Fairburn.AgentTemplate.Proxy.GetTaskRequest request);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/GetTask", ReplyAction="http://tempuri.org/IService/GetTaskResponse")]
        System.Threading.Tasks.Task<IET.Inspec.Fairburn.AgentTemplate.Proxy.TaskResponse> GetTaskAsync(IET.Inspec.Fairburn.AgentTemplate.Proxy.GetTaskRequest request);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/PostResults", ReplyAction="http://tempuri.org/IService/PostResultsResponse")]
        IET.Inspec.Fairburn.Framework.AgentAcknowledgeResponse PostResults(IET.Inspec.Fairburn.AgentTemplate.Proxy.PostResultsRequest request);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/PostResults", ReplyAction="http://tempuri.org/IService/PostResultsResponse")]
        System.Threading.Tasks.Task<IET.Inspec.Fairburn.Framework.AgentAcknowledgeResponse> PostResultsAsync(IET.Inspec.Fairburn.AgentTemplate.Proxy.PostResultsRequest request);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IServiceChannel : IET.Inspec.Fairburn.AgentTemplate.Proxy.IService, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class ServiceClient : System.ServiceModel.ClientBase<IET.Inspec.Fairburn.AgentTemplate.Proxy.IService>, IET.Inspec.Fairburn.AgentTemplate.Proxy.IService {
        
        public ServiceClient() {
        }
        
        public ServiceClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public ServiceClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public ServiceClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public ServiceClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public IET.Inspec.Fairburn.Framework.AgentPingResponse Ping() {
            return base.Channel.Ping();
        }
        
        public System.Threading.Tasks.Task<IET.Inspec.Fairburn.Framework.AgentPingResponse> PingAsync() {
            return base.Channel.PingAsync();
        }
        
        public IET.Inspec.Fairburn.AgentTemplate.Proxy.TaskResponse GetTask(IET.Inspec.Fairburn.AgentTemplate.Proxy.GetTaskRequest request) {
            return base.Channel.GetTask(request);
        }
        
        public System.Threading.Tasks.Task<IET.Inspec.Fairburn.AgentTemplate.Proxy.TaskResponse> GetTaskAsync(IET.Inspec.Fairburn.AgentTemplate.Proxy.GetTaskRequest request) {
            return base.Channel.GetTaskAsync(request);
        }
        
        public IET.Inspec.Fairburn.Framework.AgentAcknowledgeResponse PostResults(IET.Inspec.Fairburn.AgentTemplate.Proxy.PostResultsRequest request) {
            return base.Channel.PostResults(request);
        }
        
        public System.Threading.Tasks.Task<IET.Inspec.Fairburn.Framework.AgentAcknowledgeResponse> PostResultsAsync(IET.Inspec.Fairburn.AgentTemplate.Proxy.PostResultsRequest request) {
            return base.Channel.PostResultsAsync(request);
        }
    }
}
